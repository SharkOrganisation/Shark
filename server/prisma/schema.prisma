generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int       @id @default(autoincrement())
  fullname String
  email    String
  password String
  product  Product[]
}

model User {
  id            String           @id
  pfImage       String
  fullname      String
  email         String
  age           Int
  region        String
  datebirth     String
  bmi           Float?
  basket        Basket[]
  comments      Comment[]
  followedCoach FollowingCoach[]
  followedGym   FollowingGym[]
  memberShip    Membership?
  review        Review[]
  savedPosts    SavedPost[]
  userPlan      UserPlan[]
}

model Coach {
  id         String              @id
  fullname   String
  email      String
  pfImage    String
  datebirth  String
  bio        String
  speciality String
  perSession Float
  gymId      String?
  basket     Basket[]
  Gym        Gym?                @relation(fields: [gymId], references: [id])
  followGym  CoachfollowingGym[]
  followers  FollowingCoach[]
  plan       Plan[]
  posts      Post[]
}

model Gym {
  id             String              @id
  fullname       String
  Email          String
  pfImage        String
  type           String?
  bio            String?
  region         String
  location       String
  verified       Boolean?
  basket         Basket[]
  coaches        Coach[]
  followersCoach CoachfollowingGym[]
  followers      FollowingGym[]
  memberships    Membership[]
  posts          Post[]
  review         Review[]
}

model Post {
  id        Int         @id @default(autoincrement())
  content   String
  likes     Int
  image     String[]
  gymId     String?
  coachId   String?
  comments  Comment[]
  Coach     Coach?      @relation(fields: [coachId], references: [id])
  Gym       Gym?        @relation(fields: [gymId], references: [id])
  savePosts SavedPost[]
}

model Comment {
  id      Int     @id @default(autoincrement())
  content String
  likes   Int
  postId  Int?
  userId  String?
  Post    Post?   @relation(fields: [postId], references: [id])
  User    User?   @relation(fields: [userId], references: [id])
}

model SavedPost {
  id     Int     @id @default(autoincrement())
  userId String?
  postId Int?
  Post   Post?   @relation(fields: [postId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
}

model FollowingCoach {
  id      Int     @id @default(autoincrement())
  coachId String?
  userId  String?
  Coach   Coach?  @relation(fields: [coachId], references: [id])
  User    User?   @relation(fields: [userId], references: [id])
}

model FollowingGym {
  id     Int     @id @default(autoincrement())
  userId String?
  gymId  String?
  Gym    Gym?    @relation(fields: [gymId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
}

model CoachfollowingGym {
  id      Int     @id @default(autoincrement())
  coachId String?
  gymId   String?
  Coach   Coach?  @relation(fields: [coachId], references: [id])
  Gym     Gym?    @relation(fields: [gymId], references: [id])
}

model Membership {
  id            Int       @id @default(autoincrement())
  type          String
  price         Float
  establishedAt DateTime? @default(now())
  expiredAt     DateTime?
  gymId         String?
  userId        String    @unique
  Gym           Gym?      @relation(fields: [gymId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model Diet {
  id    Int    @id @default(autoincrement())
  name  String
  meals String
  plan  Plan[]
}

model Exercice {
  id              Int               @id @default(autoincrement())
  bodyPart        String
  equipment       String
  gifUrl          String
  name            String
  target          String
  programExercice ProgramExercice[]
}

model ProgramExercice {
  id         Int       @id @default(autoincrement())
  reps       Int
  sets       Int
  exerciceId Int?
  programId  Int?
  Exercice   Exercice? @relation(fields: [exerciceId], references: [id])
  Program    Program?  @relation(fields: [programId], references: [id])
}

model Program {
  id              Int               @id @default(autoincrement())
  name            String
  duration        String
  description     String
  plan            Plan?
  programExercice ProgramExercice[]
}

model Plan {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  programId Int?       @unique
  coachId   String?
  dietId    Int?
  Coach     Coach?     @relation(fields: [coachId], references: [id])
  Diet      Diet?      @relation(fields: [dietId], references: [id])
  program   Program?   @relation(fields: [programId], references: [id])
  userPlan  UserPlan[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  quantity    Int
  catergory   String
  images      String[]
  adminId     Int?
  basket      Basket[]
  Admin       Admin?   @relation(fields: [adminId], references: [id])
}

model Basket {
  id        Int      @id @default(autoincrement())
  productId Int?
  userId    String?
  coachId   String?
  gymId     String?
  Coach     Coach?   @relation(fields: [coachId], references: [id])
  Gym       Gym?     @relation(fields: [gymId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
}

model Review {
  id     Int     @id @default(autoincrement())
  stars  Int
  gymId  String?
  userId String?
  Gym    Gym?    @relation(fields: [gymId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
}

model UserPlan {
  id     Int     @id @default(autoincrement())
  status Boolean
  userId String?
  planId Int?
  Plan   Plan?   @relation(fields: [planId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
}
